From d43b2acc1c5117c2926f2f799b5294489b9b40b7 Mon Sep 17 00:00:00 2001
From: Sebastian Sumpf <sebastian.sumpf@genode-labs.com>
Date: Fri, 5 Sep 2025 19:18:41 +0200
Subject: [PATCH] genode: dummies & fix dependencies

---
 gio/dummies.c    | 23 +++++++++++++++++++++++
 gio/meson.build  |  1 +
 glib/dummies.c   | 14 ++++++++++++++
 glib/meson.build | 10 ++++++++--
 meson.build      | 12 ++++++++----
 5 files changed, 54 insertions(+), 6 deletions(-)
 create mode 100644 gio/dummies.c
 create mode 100644 glib/dummies.c

diff --git a/gio/dummies.c b/gio/dummies.c
new file mode 100644
index 0000000..4830ded
--- /dev/null
+++ b/gio/dummies.c
@@ -0,0 +1,23 @@
+#include <stdio.h>
+
+
+/* currently not in Genoade's libc api */
+struct servent;
+int getservbyname_r(const char *, const char *, struct servent *,
+                     char *, size_t, struct servent **);
+int getservbyname_r(const char *, const char *, struct servent *,
+                     char *, size_t, struct servent **)
+{
+	printf("%s:%d\n", __func__, __LINE__);
+	return 0;
+}
+
+
+/* is currently not compiled into Genode's libc */
+
+unsigned int if_nametoindex(const char *);
+unsigned int if_nametoindex(const char *)
+{
+	printf("%s:%d: called not implemented\n", __func__, __LINE__);
+	return 0;
+}
diff --git a/gio/meson.build b/gio/meson.build
index 39256d3..8d003bd 100644
--- a/gio/meson.build
+++ b/gio/meson.build
@@ -485,6 +485,7 @@ else
 endif
 
 gio_base_sources = files(
+  'dummies.c',
   'gappinfo.c',
   'gasynchelper.c',
   'gasyncinitable.c',
diff --git a/glib/dummies.c b/glib/dummies.c
new file mode 100644
index 0000000..64474f9
--- /dev/null
+++ b/glib/dummies.c
@@ -0,0 +1,14 @@
+#include <stdio.h>
+
+void closefrom(int);
+void closefrom(int)
+{
+	printf("%s:%d: called not implemented\n", __func__, __LINE__);
+}
+
+unsigned int if_nametoindex(const char *);
+unsigned int if_nametoindex(const char *)
+{
+	printf("%s:%d: called not implemented\n", __func__, __LINE__);
+	return 0;
+}
diff --git a/glib/meson.build b/glib/meson.build
index 209bcbf..122578e 100644
--- a/glib/meson.build
+++ b/glib/meson.build
@@ -369,7 +369,7 @@ if host_system == 'windows'
     glib_sources += files('dirent/wdirent.c')
   endif
 else
-  glib_sources += files('glib-unix.c', 'gspawn-posix.c', 'giounix.c')
+  glib_sources += files('glib-unix.c', 'gspawn-posix.c', 'giounix.c', 'dummies.c')
   platform_deps = []
 endif
 
@@ -403,7 +403,7 @@ if use_pcre2_static_flag
 endif
 
 glib_c_args = ['-DG_LOG_DOMAIN="GLib"'] + glib_c_args_internal + pcre2_static_args
-libglib = library('glib-2.0',
+libglib = library('glib.lib',
   glib_dtrace_obj, glib_dtrace_hdr,
   sources : [glib_deprecated_sources, glib_sources],
   version : library_version,
@@ -429,6 +429,12 @@ libglib = library('glib-2.0',
   c_args : glib_c_args,
   objc_args : glib_c_args,
   gnu_symbol_visibility : 'hidden',
+  name_prefix: '',
+  #
+  # ommit since we changed the name from glib-2.0 to glib-2.0.lib above because
+  # current Meson (1.7.2) cannot handle building glib like this
+  #
+  #name_suffix: 'lib.so',
 )
 
 libglib_dep = declare_dependency(
diff --git a/meson.build b/meson.build
index f97b20c..3eebc89 100644
--- a/meson.build
+++ b/meson.build
@@ -416,7 +416,7 @@ headers = [
   'locale.h',
   'mach/mach_time.h',
   'memory.h',
-  'mntent.h',
+#  'mntent.h', omitt on Genode
   'netlink/netlink.h',
   'netlink/netlink_route.h',
   'poll.h',
@@ -2127,7 +2127,8 @@ if host_system == 'windows' and not get_option('force_posix_threads')
   glibconfig_conf.set('g_threads_impl_def', 'WIN32')
   glib_conf.set('THREADS_WIN32', 1)
 else
-  thread_dep = dependency('threads')
+  thread_dep = []
+  #dependency('threads')
   threads_implementation = 'posix'
   pthread_prefix = '''
       #ifndef _GNU_SOURCE
@@ -2234,13 +2235,15 @@ if host_system == 'windows'
   # any external library for it
   libiconv = []
 else
-  libiconv = dependency('iconv')
+  libiconv = dependency('libiconv')
 endif
 
 pcre2_req = '>=10.32'
 pcre2_options = [
   'default_library=static',
   'test=false',
+  'jit=disabled',
+  'grep=false',
 ]
 
 # Pick up pcre from the system, or if "--force-fallback-for libpcre2-8" was specified
@@ -2337,7 +2340,8 @@ if libintl.found() and libintl.type_name() != 'internal'
   have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset', dependencies: libintl_deps, prefix: libintl_prefix)
 else
   # using proxy-libintl fallback
-  libintl = dependency('intl', allow_fallback: true)
+  libintl_options = [ 'default_library=static' ]
+  libintl = dependency('intl', allow_fallback: true, default_options: libintl_options)
   assert(libintl.type_name() == 'internal')
   libintl_deps = [libintl]
   have_bind_textdomain_codeset = true  # proxy-libintl supports it
-- 
2.49.0

